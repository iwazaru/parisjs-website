{"filename":"2015-03-25.md","date":"2015-03-25","edition":"44","host":"Maltem","sponsors":[],"meetupLink":"https://www.meetup.com/fr-FR/Paris-js/events/221324067/","talks":[{"title":"Building Realtime Apps with Firebase","extract":"Learn how to store and sync data in realtime with Firebase\n\nBuilding Realtime Apps with [Firebase](https://www.firebase.com)\n\n - Why realtime is important\n - Overview of Firebase\n - Live coding: Building a chat app with Twitter auth in 10 minutes","authors":[{"name":"Sara Robinson","url":"https://twitter.com/srobtweets","avatar":"https://www.firebase.com/resources/images/team/sara_robinson.jpg"}],"slides":["https://slidee.firebaseapp.com/presentations/parisjs/"],"links":[],"videos":[]},{"title":"Comment gérer l'asynchrone : hier, aujourd'hui, demain et après demain","extract":" Comment gérer l'asynchrone : hier, aujourd'hui, demain et après demain\n\nCe n'est un secret pour personne, le JavaScript est un langage asynchrone, et structurer son code en conséquence nécessite de faire des choix. Rapide rappel des techniques d'aujourd'hui, et démonstration des techniques de demain.\n\n## Hier\nTout le monde a utilisé des callbacks et s'est cassé les dents sur le \"callback hell\"\n\n## Aujourd'hui\nLes Promises, désormais natives (ES6) offrent une gestion plus intelligente de l'asynchrone et apportent une bien meilleure syntaxe et architecture de code.\nEvidente amélioration sur les callbacks, mais ne peut-on pas mieux faire ?\n\n## Demain\nLes générateurs font leur entrée dans le monde du JavaScript, et une utilisation maline de cet outil, couplé aux Promises, permet une bien meilleure syntaxe et compréhension du code.\nQu'est-ce que des générateurs, comment les utiliser pour gérer l'asynchrone de manière plus simple et efficace ? Peut on s'en servir dès aujourd'hui ?\n\n## Après demain\nEcmascript 7 (et oui) apportera de nouvelles méthodes async / await pour gérer l'asynchrone.\nComment l'écrire, qu'est-ce qu'on y gagne, comment ça marche ? Et surtout, peut on s'en servir dès aujourd'hui ?\n","authors":[{"name":"Gabriel Majoulet","url":"https://twitter.com/gmajoulet","avatar":"https://twitter.com/gmajoulet/profile_image?size=bigger"}],"slides":["https://www.slideshare.net/gmajoulet/paris-js-asynchronous"],"links":[],"videos":[]},{"title":"Analyser le code spaghetti d'une page avec Yellow Lab Tools","extract":"Analyser le code spaghetti d'une page avec Yellow Lab Tools\n\nPrésentation de l'outil [http://yellowlab.tools](http://yellowlab.tools)\n\n - Pourquoi le JavaScript peut-il être si lent ?\n - Comment l'accélérer en diminuant le nombre d'accès au DOM ?\n - Comment utiliser Yellow Lab Tools pour analyser le code JS et trouver des axes d'optimisaiton ?\n","authors":[{"name":"Gaël Métais","url":"https://twitter.com/gaelmetais","avatar":"https://twitter.com/gaelmetais/profile_image?size=bigger"}],"slides":["http://www.slideshare.net/gaelmetais/ylt-paris-js-mars-2015"],"links":["https://github.com/gmetais/YellowLabTools"],"videos":[]}],"body":{"t":"div"}}